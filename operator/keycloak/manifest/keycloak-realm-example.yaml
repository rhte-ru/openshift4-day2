apiVersion: keycloak.org/v1alpha1
kind: KeycloakRealm
metadata:
  labels:
    label.name: label-example
    realm: realm-example
  name: realm-example
  namespace: namespace-example
spec:
  instanceSelector:
    matchLabels:
      label.name: label-example
  realm:
    displayName: LDAPRealm
    enabled: true
    id: realm-example
    # loginTheme: keycloak
    realm: realm-example
    userFederationProviders:
      - displayName: LDAPRealm
        providerName: ldap
        config:
          vendor: rhds
          connectionUrl: ldap://idm.example.com
          bindDn: USERNAME
          # This reads the REALM-SECRET from /opt/jboss/keycloak/secrets
          # In this example, the secret key is called ldap-realm_bindCredential
          # See deploy/examples/keycloak/keycloak-with-vault.yaml for an
          # example of how to setup the vault secret directory
          # bindCredential: "${vault.bindCredential}"
          bindCredential: plain-text-password
          customUserSearchFilter: (memberOf=cn=ocp-users,cn=groups,cn=accounts,dc=example,dc=com)
          usersDn: cn=groups,cn=accounts,dc=example,dc=com
          usernameLDAPAttribute: uid
          uuidLDAPAttribute: ipaUniqueID
          # searchScope: "1"
          searchScope: "2" # equal 'sub'
          # useTruststoreSpi: "ldapsOnly"
          # trustEmail: "true"
          userObjectClasses: inetOrgPerson, organizationalPerson
          rdnLDAPAttribute: uid
          editMode: READ_ONLY
          # debug: "true"
    userFederationMappers:
      - name: username
        federationProviderDisplayName: LDAPRealm
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: "false"
          is.mandatory.in.ldap: "true"
          ldap.attribute: uid
          read.only: "true"
          user.model.attribute: username
      - name: email
        federationProviderDisplayName: LDAPRealm
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: "false"
          is.mandatory.in.ldap: "false"
          ldap.attribute: mail
          read.only: "true"
          user.model.attribute: email
      - name: create date
        federationProviderDisplayName: LDAPRealm
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: "true"
          is.mandatory.in.ldap: "false"
          ldap.attribute: createTimestamp
          read.only: "true"
          user.model.attribute: createTimestamp
      - name: last name
        federationProviderDisplayName: LDAPRealm
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: "true"
          is.mandatory.in.ldap: "true"
          ldap.attribute: sn
          read.only: "true"
          user.model.attribute: lastName
      - name: modify date
        federationProviderDisplayName: LDAPRealm
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: "true"
          is.mandatory.in.ldap: "false"
          ldap.attribute: modifyTimestamp
          read.only: "true"
          user.model.attribute: modifyTimestamp
      - name: first name
        federationProviderDisplayName: LDAPRealm
        federationMapperType: user-attribute-ldap-mapper
        config:
          always.read.value.from.ldap: "true"
          is.mandatory.in.ldap: "true"
          ldap.attribute: givenName
          read.only: "true"
          user.model.attribute: firstName
      # - name: groups
      #   federationProviderDisplayName: LDAPRealm
      #   federationMapperType: group-ldap-mapper
      #   config:
      #     drop.non.existing.groups.during.sync: "true"
      #     groups.dn: dc=example,dc=com
      #     groups.ldap.filter: "(cn=EXAMPLE*)" #Only pull in groups that start with prefix EXAMPLE
      #     group.name.ldap.attribute: cn
      #     group.object.classes: group
      #     memberof.ldap.attribute: memberOf
      #     membership.attribute.type: dn
      #     membership.ldap.attribute: 'true'
      #     membership.user.ldap.attribute: sAMAccountName
      #     mode: READ_ONLY
      #     preserve.group.inheritance: 'true'
      #     user.roles.retrieve.strategy: GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE
